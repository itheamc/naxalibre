// Autogenerated from Pigeon (v22.7.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

private class PigeonGeneratedPigeonCodecReader: FlutterStandardReader {
}

private class PigeonGeneratedPigeonCodecWriter: FlutterStandardWriter {
}

private class PigeonGeneratedPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PigeonGeneratedPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PigeonGeneratedPigeonCodecWriter(data: data)
  }
}

class PigeonGeneratedPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PigeonGeneratedPigeonCodec(readerWriter: PigeonGeneratedPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NaxaLibreHostApi {
  func fromScreenLocation(point: [Double]) throws -> [Double]
  func toScreenLocation(latLng: [Double]) throws -> [Double]
  func getLatLngForProjectedMeters(northing: Double, easting: Double) throws -> [Double]
  func getVisibleRegion(ignorePadding: Bool) throws -> [[Double]]
  func getProjectedMetersForLatLng(latLng: [Double]) throws -> [Double]
  func getCameraPosition() throws -> [String: Any]
  func getZoom() throws -> Double
  func getHeight() throws -> Double
  func getWidth() throws -> Double
  func getMinimumZoom() throws -> Double
  func getMaximumZoom() throws -> Double
  func getMinimumPitch() throws -> Double
  func getMaximumPitch() throws -> Double
  func getPixelRatio() throws -> Double
  func isDestroyed() throws -> Bool
  func setMaximumFps(fps: Int64) throws
  func setStyle(style: String) throws
  func setSwapBehaviorFlush(flush: Bool) throws
  func animateCamera(args: [String: Any?]) throws
  func easeCamera(args: [String: Any?]) throws
  func zoomBy(by: Int64) throws
  func zoomIn() throws
  func zoomOut() throws
  func getCameraForLatLngBounds(bounds: [String: Any?]) throws -> [String: Any?]
  func queryRenderedFeatures(args: [String: Any?]) throws -> [[AnyHashable?: Any?]]
  func lastKnownLocation() throws -> [Double]
  func setLogoMargins(left: Double, top: Double, right: Double, bottom: Double) throws
  func isLogoEnabled() throws -> Bool
  func setCompassMargins(left: Double, top: Double, right: Double, bottom: Double) throws
  func setCompassImage(bytes: FlutterStandardTypedData) throws
  func setCompassFadeFacingNorth(compassFadeFacingNorth: Bool) throws
  func isCompassEnabled() throws -> Bool
  func isCompassFadeWhenFacingNorth() throws -> Bool
  func setAttributionMargins(left: Double, top: Double, right: Double, bottom: Double) throws
  func isAttributionEnabled() throws -> Bool
  func setAttributionTintColor(color: Int64) throws
  func getUri() throws -> String
  func getJson() throws -> String
  func getLight() throws -> [String: Any]
  func isFullyLoaded() throws -> Bool
  func getLayer(id: String) throws -> [String: Any?]
  func getLayers(id: String) throws -> [[String: Any?]]
  func getSource(id: String) throws -> [String: Any?]
  func getSources() throws -> [[String: Any?]]
  func addImage(name: String, bytes: FlutterStandardTypedData) throws
  func addImages(images: [String: FlutterStandardTypedData]) throws
  func addLayer(layer: [String: Any?]) throws
  func addSource(source: [String: Any?]) throws
  func removeLayer(id: String) throws -> Bool
  func removeLayerAt(index: Int64) throws -> Bool
  func removeSource(id: String) throws -> Bool
  func removeImage(name: String) throws
  func getImage(id: String) throws -> FlutterStandardTypedData
  func snapshot(completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func triggerRepaint() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NaxaLibreHostApiSetup {
  static var codec: FlutterStandardMessageCodec { PigeonGeneratedPigeonCodec.shared }
  /// Sets up an instance of `NaxaLibreHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NaxaLibreHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let fromScreenLocationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.fromScreenLocation\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fromScreenLocationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pointArg = args[0] as! [Double]
        do {
          let result = try api.fromScreenLocation(point: pointArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      fromScreenLocationChannel.setMessageHandler(nil)
    }
    let toScreenLocationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.toScreenLocation\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      toScreenLocationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let latLngArg = args[0] as! [Double]
        do {
          let result = try api.toScreenLocation(latLng: latLngArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      toScreenLocationChannel.setMessageHandler(nil)
    }
    let getLatLngForProjectedMetersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getLatLngForProjectedMeters\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLatLngForProjectedMetersChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let northingArg = args[0] as! Double
        let eastingArg = args[1] as! Double
        do {
          let result = try api.getLatLngForProjectedMeters(northing: northingArg, easting: eastingArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getLatLngForProjectedMetersChannel.setMessageHandler(nil)
    }
    let getVisibleRegionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getVisibleRegion\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getVisibleRegionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let ignorePaddingArg = args[0] as! Bool
        do {
          let result = try api.getVisibleRegion(ignorePadding: ignorePaddingArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getVisibleRegionChannel.setMessageHandler(nil)
    }
    let getProjectedMetersForLatLngChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getProjectedMetersForLatLng\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getProjectedMetersForLatLngChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let latLngArg = args[0] as! [Double]
        do {
          let result = try api.getProjectedMetersForLatLng(latLng: latLngArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getProjectedMetersForLatLngChannel.setMessageHandler(nil)
    }
    let getCameraPositionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getCameraPosition\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCameraPositionChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getCameraPosition()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getCameraPositionChannel.setMessageHandler(nil)
    }
    let getZoomChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getZoom\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getZoomChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getZoom()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getZoomChannel.setMessageHandler(nil)
    }
    let getHeightChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getHeight\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getHeightChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getHeight()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getHeightChannel.setMessageHandler(nil)
    }
    let getWidthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getWidth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getWidthChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getWidth()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getWidthChannel.setMessageHandler(nil)
    }
    let getMinimumZoomChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getMinimumZoom\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getMinimumZoomChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getMinimumZoom()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getMinimumZoomChannel.setMessageHandler(nil)
    }
    let getMaximumZoomChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getMaximumZoom\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getMaximumZoomChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getMaximumZoom()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getMaximumZoomChannel.setMessageHandler(nil)
    }
    let getMinimumPitchChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getMinimumPitch\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getMinimumPitchChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getMinimumPitch()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getMinimumPitchChannel.setMessageHandler(nil)
    }
    let getMaximumPitchChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getMaximumPitch\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getMaximumPitchChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getMaximumPitch()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getMaximumPitchChannel.setMessageHandler(nil)
    }
    let getPixelRatioChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getPixelRatio\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPixelRatioChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getPixelRatio()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getPixelRatioChannel.setMessageHandler(nil)
    }
    let isDestroyedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.isDestroyed\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isDestroyedChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isDestroyed()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isDestroyedChannel.setMessageHandler(nil)
    }
    let setMaximumFpsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setMaximumFps\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setMaximumFpsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let fpsArg = args[0] as! Int64
        do {
          try api.setMaximumFps(fps: fpsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setMaximumFpsChannel.setMessageHandler(nil)
    }
    let setStyleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setStyle\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setStyleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let styleArg = args[0] as! String
        do {
          try api.setStyle(style: styleArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setStyleChannel.setMessageHandler(nil)
    }
    let setSwapBehaviorFlushChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setSwapBehaviorFlush\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSwapBehaviorFlushChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let flushArg = args[0] as! Bool
        do {
          try api.setSwapBehaviorFlush(flush: flushArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSwapBehaviorFlushChannel.setMessageHandler(nil)
    }
    let animateCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.animateCamera\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      animateCameraChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let argsArg = args[0] as! [String: Any?]
        do {
          try api.animateCamera(args: argsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      animateCameraChannel.setMessageHandler(nil)
    }
    let easeCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.easeCamera\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      easeCameraChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let argsArg = args[0] as! [String: Any?]
        do {
          try api.easeCamera(args: argsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      easeCameraChannel.setMessageHandler(nil)
    }
    let zoomByChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.zoomBy\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      zoomByChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let byArg = args[0] as! Int64
        do {
          try api.zoomBy(by: byArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      zoomByChannel.setMessageHandler(nil)
    }
    let zoomInChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.zoomIn\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      zoomInChannel.setMessageHandler { _, reply in
        do {
          try api.zoomIn()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      zoomInChannel.setMessageHandler(nil)
    }
    let zoomOutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.zoomOut\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      zoomOutChannel.setMessageHandler { _, reply in
        do {
          try api.zoomOut()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      zoomOutChannel.setMessageHandler(nil)
    }
    let getCameraForLatLngBoundsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getCameraForLatLngBounds\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCameraForLatLngBoundsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let boundsArg = args[0] as! [String: Any?]
        do {
          let result = try api.getCameraForLatLngBounds(bounds: boundsArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getCameraForLatLngBoundsChannel.setMessageHandler(nil)
    }
    let queryRenderedFeaturesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.queryRenderedFeatures\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      queryRenderedFeaturesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let argsArg = args[0] as! [String: Any?]
        do {
          let result = try api.queryRenderedFeatures(args: argsArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      queryRenderedFeaturesChannel.setMessageHandler(nil)
    }
    let lastKnownLocationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.lastKnownLocation\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      lastKnownLocationChannel.setMessageHandler { _, reply in
        do {
          let result = try api.lastKnownLocation()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      lastKnownLocationChannel.setMessageHandler(nil)
    }
    let setLogoMarginsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setLogoMargins\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLogoMarginsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let leftArg = args[0] as! Double
        let topArg = args[1] as! Double
        let rightArg = args[2] as! Double
        let bottomArg = args[3] as! Double
        do {
          try api.setLogoMargins(left: leftArg, top: topArg, right: rightArg, bottom: bottomArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setLogoMarginsChannel.setMessageHandler(nil)
    }
    let isLogoEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.isLogoEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isLogoEnabledChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isLogoEnabled()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isLogoEnabledChannel.setMessageHandler(nil)
    }
    let setCompassMarginsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setCompassMargins\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCompassMarginsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let leftArg = args[0] as! Double
        let topArg = args[1] as! Double
        let rightArg = args[2] as! Double
        let bottomArg = args[3] as! Double
        do {
          try api.setCompassMargins(left: leftArg, top: topArg, right: rightArg, bottom: bottomArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setCompassMarginsChannel.setMessageHandler(nil)
    }
    let setCompassImageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setCompassImage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCompassImageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let bytesArg = args[0] as! FlutterStandardTypedData
        do {
          try api.setCompassImage(bytes: bytesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setCompassImageChannel.setMessageHandler(nil)
    }
    let setCompassFadeFacingNorthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setCompassFadeFacingNorth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCompassFadeFacingNorthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let compassFadeFacingNorthArg = args[0] as! Bool
        do {
          try api.setCompassFadeFacingNorth(compassFadeFacingNorth: compassFadeFacingNorthArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setCompassFadeFacingNorthChannel.setMessageHandler(nil)
    }
    let isCompassEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.isCompassEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isCompassEnabledChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isCompassEnabled()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isCompassEnabledChannel.setMessageHandler(nil)
    }
    let isCompassFadeWhenFacingNorthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.isCompassFadeWhenFacingNorth\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isCompassFadeWhenFacingNorthChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isCompassFadeWhenFacingNorth()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isCompassFadeWhenFacingNorthChannel.setMessageHandler(nil)
    }
    let setAttributionMarginsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setAttributionMargins\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAttributionMarginsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let leftArg = args[0] as! Double
        let topArg = args[1] as! Double
        let rightArg = args[2] as! Double
        let bottomArg = args[3] as! Double
        do {
          try api.setAttributionMargins(left: leftArg, top: topArg, right: rightArg, bottom: bottomArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAttributionMarginsChannel.setMessageHandler(nil)
    }
    let isAttributionEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.isAttributionEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isAttributionEnabledChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isAttributionEnabled()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isAttributionEnabledChannel.setMessageHandler(nil)
    }
    let setAttributionTintColorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setAttributionTintColor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAttributionTintColorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let colorArg = args[0] as! Int64
        do {
          try api.setAttributionTintColor(color: colorArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAttributionTintColorChannel.setMessageHandler(nil)
    }
    let getUriChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getUri\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUriChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getUri()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getUriChannel.setMessageHandler(nil)
    }
    let getJsonChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getJson\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getJsonChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getJson()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getJsonChannel.setMessageHandler(nil)
    }
    let getLightChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getLight\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLightChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getLight()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getLightChannel.setMessageHandler(nil)
    }
    let isFullyLoadedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.isFullyLoaded\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isFullyLoadedChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isFullyLoaded()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isFullyLoadedChannel.setMessageHandler(nil)
    }
    let getLayerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getLayer\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLayerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          let result = try api.getLayer(id: idArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getLayerChannel.setMessageHandler(nil)
    }
    let getLayersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getLayers\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLayersChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          let result = try api.getLayers(id: idArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getLayersChannel.setMessageHandler(nil)
    }
    let getSourceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getSource\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSourceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          let result = try api.getSource(id: idArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getSourceChannel.setMessageHandler(nil)
    }
    let getSourcesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getSources\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSourcesChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getSources()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getSourcesChannel.setMessageHandler(nil)
    }
    let addImageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.addImage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addImageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let nameArg = args[0] as! String
        let bytesArg = args[1] as! FlutterStandardTypedData
        do {
          try api.addImage(name: nameArg, bytes: bytesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addImageChannel.setMessageHandler(nil)
    }
    let addImagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.addImages\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addImagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let imagesArg = args[0] as! [String: FlutterStandardTypedData]
        do {
          try api.addImages(images: imagesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addImagesChannel.setMessageHandler(nil)
    }
    let addLayerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.addLayer\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addLayerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let layerArg = args[0] as! [String: Any?]
        do {
          try api.addLayer(layer: layerArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addLayerChannel.setMessageHandler(nil)
    }
    let addSourceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.addSource\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addSourceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let sourceArg = args[0] as! [String: Any?]
        do {
          try api.addSource(source: sourceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addSourceChannel.setMessageHandler(nil)
    }
    let removeLayerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.removeLayer\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeLayerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          let result = try api.removeLayer(id: idArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeLayerChannel.setMessageHandler(nil)
    }
    let removeLayerAtChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.removeLayerAt\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeLayerAtChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let indexArg = args[0] as! Int64
        do {
          let result = try api.removeLayerAt(index: indexArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeLayerAtChannel.setMessageHandler(nil)
    }
    let removeSourceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.removeSource\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeSourceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          let result = try api.removeSource(id: idArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeSourceChannel.setMessageHandler(nil)
    }
    let removeImageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.removeImage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeImageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let nameArg = args[0] as! String
        do {
          try api.removeImage(name: nameArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeImageChannel.setMessageHandler(nil)
    }
    let getImageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getImage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getImageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          let result = try api.getImage(id: idArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getImageChannel.setMessageHandler(nil)
    }
    let snapshotChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.snapshot\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      snapshotChannel.setMessageHandler { _, reply in
        api.snapshot { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      snapshotChannel.setMessageHandler(nil)
    }
    let triggerRepaintChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.triggerRepaint\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      triggerRepaintChannel.setMessageHandler { _, reply in
        do {
          try api.triggerRepaint()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      triggerRepaintChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol NaxaLibreFlutterApiProtocol {
  func onFpsChanged(fps fpsArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onMapLoaded(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onMapRendered(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onStyleLoaded(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onMapClick(latLng latLngArg: [Double], completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onMapLongClick(latLng latLngArg: [Double], completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onCameraIdle(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onCameraMoveStarted(reason reasonArg: Int64?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onCameraMove(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onCameraMoveEnd(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onFling(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onRotateStarted(angleThreshold angleThresholdArg: Double, deltaSinceStart deltaSinceStartArg: Double, deltaSinceLast deltaSinceLastArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onRotate(angleThreshold angleThresholdArg: Double, deltaSinceStart deltaSinceStartArg: Double, deltaSinceLast deltaSinceLastArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onRotateEnd(angleThreshold angleThresholdArg: Double, deltaSinceStart deltaSinceStartArg: Double, deltaSinceLast deltaSinceLastArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class NaxaLibreFlutterApi: NaxaLibreFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: PigeonGeneratedPigeonCodec {
    return PigeonGeneratedPigeonCodec.shared
  }
  func onFpsChanged(fps fpsArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onFpsChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([fpsArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onMapLoaded(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onMapLoaded\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onMapRendered(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onMapRendered\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onStyleLoaded(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onStyleLoaded\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onMapClick(latLng latLngArg: [Double], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onMapClick\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([latLngArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onMapLongClick(latLng latLngArg: [Double], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onMapLongClick\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([latLngArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onCameraIdle(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onCameraIdle\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onCameraMoveStarted(reason reasonArg: Int64?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onCameraMoveStarted\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([reasonArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onCameraMove(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onCameraMove\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onCameraMoveEnd(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onCameraMoveEnd\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onFling(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onFling\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onRotateStarted(angleThreshold angleThresholdArg: Double, deltaSinceStart deltaSinceStartArg: Double, deltaSinceLast deltaSinceLastArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onRotateStarted\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([angleThresholdArg, deltaSinceStartArg, deltaSinceLastArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onRotate(angleThreshold angleThresholdArg: Double, deltaSinceStart deltaSinceStartArg: Double, deltaSinceLast deltaSinceLastArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onRotate\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([angleThresholdArg, deltaSinceStartArg, deltaSinceLastArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onRotateEnd(angleThreshold angleThresholdArg: Double, deltaSinceStart deltaSinceStartArg: Double, deltaSinceLast deltaSinceLastArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onRotateEnd\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([angleThresholdArg, deltaSinceStartArg, deltaSinceLastArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
